#!/usr/bin/env -S deno run --allow-read --allow-write --allow-env --allow-run --allow-sys

/**
 * Drizzle-based Package System
 * 
 * This recreates package.sql.ts but uses Drizzle decorators instead of SQLa
 * Generates all web UI content (sqlpage_files and sqlpage_aide_navigation)
 */

import { DrizzleSqlPageNotebook } from "./notebook-drizzle/drizzle-sqlpage.ts";
import { DrizzleShellSqlPages } from "./web-ui-content-drizzle/shell.ts";
import { DrizzleConsoleSqlPages } from "./web-ui-content-drizzle/console.ts";
import { DrizzleOrchestrationSqlPages } from "./web-ui-content-drizzle/orchestration.ts";
import { DrizzleUniformResourceSqlPages } from "./web-ui-content-drizzle/uniform-resource.ts";
import { DrizzleDocsSqlPages } from "./web-ui-content-drizzle/docs.ts";

export async function SQL() {
  const shellPages = new DrizzleShellSqlPages();
  const consolePages = new DrizzleConsoleSqlPages();
  const orchestrationPages = new DrizzleOrchestrationSqlPages();
  const uniformResourcePages = new DrizzleUniformResourceSqlPages();
  const docsPages = new DrizzleDocsSqlPages();
  
  // Generate the SQLPage files
  const sqlPageResults = await DrizzleSqlPageNotebook.SQL(shellPages, consolePages, orchestrationPages, uniformResourcePages, docsPages);
  
  // Generate the views (DDL) needed by the pages
  const consoleDDL = consolePages.infoSchemaDDL();
  const orchestrationDDL = orchestrationPages.supportDDL();
  const uniformResourceDDL = uniformResourcePages.supportDDL();
  
  // Generate auto-generated table/view browser pages
  const autoGeneratedBrowsers = consolePages.autoGenerateTableViewBrowsers();
  
  // Combine SQLPage files, DDL, and auto-generation
  return [...sqlPageResults, consoleDDL, orchestrationDDL, uniformResourceDDL, autoGeneratedBrowsers];
}

// this will be used by any callers who want to serve it as a CLI with STDOUT
if (import.meta.main) {
  console.log((await SQL()).join("\n"));
}