#!/usr/bin/env -S deno run --allow-read --allow-write --allow-env --allow-run --allow-sys

/**
 * Drizzle-based Lifecycle Management
 * 
 * This recreates RssdInitSqlNotebook but uses Drizzle decorators instead of SQLa
 */

import { 
  DrizzleCodeNotebook, 
  migratableCellDrizzle, 
  docsCellDrizzle, 
  llmPromptCellDrizzle,
  osQueryMsCellDrizzle,
  osQueryMsPolicyCellDrizzle,
  textAssetCellDrizzle
} from "./notebook-drizzle/drizzle-notebook.ts";
import { SQL as SQLTemplate, inlinedSQL } from "../universal/sql-text.ts";
import { ConsoleSqlPages } from "./web-ui-content/console.ts";
// Views are now defined in ../universal/views.ts and will be auto-generated by Drizzle

/**
 * Drizzle-based equivalent of RssdInitSqlNotebook
 * Uses Drizzle decorators and SQL generation instead of SQLa
 */
export class DrizzleRssdInitNotebook extends DrizzleCodeNotebook {
  constructor() {
    super("rssd-init");
  }

  async bootstrapDDL() {
    // Generate kernel INSERTs first to satisfy FK constraints
    const kernelInserts = DrizzleCodeNotebook.generateKernelInserts();
    
    // Build SQL parts like working version - include actual cell content execution
    const parts = [
      "-- Drizzle ORM-based bootstrap DDL",
      "-- Session state and schema creation", 
      this.sessionStateSetup(),
      "",
      "-- Code notebook kernels MUST be inserted BEFORE any cells reference them",
      kernelInserts.join(';\n\n') + ';',
      "",
      "-- Execute migration cell content directly (like working version)",
      this.v001_once_initialDDL(),
      this.surveilr_table_size(), 
      this.v001_seedDML(),
      this.osqueryPolicyInserts(),
      "",
      "-- Web UI auto-generation and navigation",
      this.auto_generate_console_content_tabular_sqlpage_files(),
      this.navigationEntries(),
      this.notebookBusinessLogicViews(),
      this.uniformResourceGraphViews(),
      this.consoleInformationSchemaViews(),
      ""
    ];

    // Generate cell INSERTs AFTER kernels and migration content
    const notebookSQL = await DrizzleCodeNotebook.SQL(this);
    parts.push("-- Notebook cell INSERT statements (after kernels exist)");
    parts.push(notebookSQL.join(';\n\n') + ';');

    return parts.join('\n\n');
  }

  // Generate session state setup
  sessionStateSetup(): string {
    return inlinedSQL(SQLTemplate`-- Session state ephemeral table for temporary session data
CREATE TEMP TABLE IF NOT EXISTS "session_state_ephemeral" (
    "key" TEXT PRIMARY KEY NOT NULL,
    "value" TEXT NOT NULL
);

-- Insert current session state
INSERT INTO "session_state_ephemeral" ("key", "value") VALUES ('current_user', 'SYSTEM') ON CONFLICT DO UPDATE SET value = excluded.value;
INSERT INTO "session_state_ephemeral" ("key", "value") VALUES ('current_user_name', 'UNKNOWN') ON CONFLICT DO UPDATE SET value = excluded.value;`);
  }

  // Views are now defined in ../universal/views.ts using Drizzle query builder
  // This ensures consistency and type safety across the system
  notebookBusinessLogicViews(): string {
    return inlinedSQL(SQLTemplate`-- Code notebook business logic views are now defined in ../universal/views.ts
-- Views will be created automatically by Drizzle ORM schema introspection
-- This ensures consistency between TypeScript definitions and SQL implementation

-- All code notebook views have been moved to ../universal/views.ts:
-- - code_notebook_cell_versions
-- - code_notebook_cell_latest  
-- - code_notebook_sql_cell_migratable_version
-- - code_notebook_sql_cell_migratable
-- - code_notebook_sql_cell_migratable_state
-- - code_notebook_sql_cell_migratable_not_executed
-- - code_notebook_migration_sql`);
  }

  // Generate console information schema views
  consoleInformationSchemaViews(): string {
    const consoleSqlPages = new ConsoleSqlPages();
    const result = consoleSqlPages.infoSchemaDDL();
    // Check if result has a SQL method that can be called to get the SQL string
    if (typeof result === 'object' && result && 'SQL' in result) {
      try {
        // ConsoleSqlPages.infoSchemaDDL() returns an object with a SQL property
        const sqlMethod = (result as { SQL: (context?: unknown) => string }).SQL;
        return String(sqlMethod({})); // Provide empty context
      } catch {
        return String(result);
      }
    }
    return String(result);
  }

  // Store the entire bootstrap as a "comment" cell for documentation
  @docsCellDrizzle({
    description: "Bootstrap SQL for history/documentation purposes"
  })
  "Bootstrap SQL"() {
    return inlinedSQL(SQLTemplate`-- Complete bootstrap SQL generated using Drizzle ORM
-- Session state and views are generated at the top level of bootstrap
-- All business logic views are defined in ../universal/views.ts using Drizzle query builder`);
  }

  @migratableCellDrizzle({
    description: "Creates all service tables to initialize an RSSD (once_ pragma means it will only be run once in the database by surveilr)",
  })
  v001_once_initialDDL() {
    // This would contain the service tables DDL
    // For now, returning a placeholder since the actual service models would need to be converted
    return inlinedSQL(SQLTemplate`-- Service tables DDL would go here
-- This is equivalent to the original v001_once_initialDDL method`);
  }

  @migratableCellDrizzle({
    description: "Creates a session_state_ephemeral table for session arguments",
  })
  session_ephemeral_table() {
    return inlinedSQL(SQLTemplate`-- Session state ephemeral table is created at the top level of bootstrap
-- This ensures it's available for all subsequent operations`);
  }

  @migratableCellDrizzle({
    description: "Creates a surveilr_table_size to compute the sizes for individual tables for statistical purposes.",
  })
  surveilr_table_size() {
    return inlinedSQL(SQLTemplate`CREATE TABLE IF NOT EXISTS surveilr_table_size (
    table_name TEXT PRIMARY KEY,
    table_size_mb REAL
);

DELETE FROM surveilr_table_size;
INSERT INTO surveilr_table_size (table_name, table_size_mb)
SELECT name, 
       ROUND(SUM(pgsize) / (1024.0 * 1024), 2)
FROM dbstat
GROUP BY name;`);
  }

  @migratableCellDrizzle({
    description: "Seed data which provides default configuration for surveilr app",
  })
  v001_seedDML() {
    // Follow exact pattern from working version using model-based INSERT generation
    const created_at = "CURRENT_TIMESTAMP";
    const namespace = "default";
    
    // Path matching rules - replicate working version logic exactly
    const urIngestPathMatchRules = () => {
      return [
        `INSERT INTO "ur_ingest_resource_path_match_rule" ("ur_ingest_resource_path_match_rule_id", "namespace", "regex", "flags", "nature", "priority", "description", "elaboration", "created_at", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by", "activity_log") VALUES ('ignore .git and node_modules paths', 'default', '/(\.git|node_modules)/', 'IGNORE_RESOURCE', NULL, NULL, 'Ignore any entry with \`/.git/\` or \`/node_modules/\` in the path.', NULL, CURRENT_TIMESTAMP, 'SYSTEM', NULL, NULL, NULL, NULL, NULL) ON CONFLICT(ur_ingest_resource_path_match_rule_id) DO NOTHING`,

        `INSERT INTO "ur_ingest_resource_path_match_rule" ("ur_ingest_resource_path_match_rule_id", "namespace", "regex", "flags", "nature", "priority", "description", "elaboration", "created_at", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by", "activity_log") VALUES ('images-metadata', 'default', '\.(?P<nature>jpg|jpeg|png|gif|bmp|tiff|svg|webp)$', 'CONTENT_ACQUIRABLE | CONTENT_ACQUIRABLE_METADATA', '?P<nature>', NULL, 'Images with metadata extraction', NULL, CURRENT_TIMESTAMP, 'SYSTEM', NULL, NULL, NULL, NULL, NULL) ON CONFLICT(ur_ingest_resource_path_match_rule_id) DO NOTHING`,

        `INSERT INTO "ur_ingest_resource_path_match_rule" ("ur_ingest_resource_path_match_rule_id", "namespace", "regex", "flags", "nature", "priority", "description", "elaboration", "created_at", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by", "activity_log") VALUES ('jsonl-content-replace', 'default', '\.(?P<nature>jsonl)$', 'CONTENT_ACQUIRABLE | CONTENT_REPLACE_JSON_LINES', '?P<nature>', NULL, 'JSONL files with content replacement', NULL, CURRENT_TIMESTAMP, 'SYSTEM', NULL, NULL, NULL, NULL, NULL) ON CONFLICT(ur_ingest_resource_path_match_rule_id) DO NOTHING`,

        `INSERT INTO "ur_ingest_resource_path_match_rule" ("ur_ingest_resource_path_match_rule_id", "namespace", "regex", "flags", "nature", "priority", "description", "elaboration", "created_at", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by", "activity_log") VALUES ('media-metadata', 'default', '\.(?P<nature>mp4|mp3)$', 'CONTENT_ACQUIRABLE | CONTENT_ACQUIRABLE_METADATA', '?P<nature>', NULL, 'Media files with metadata extraction', NULL, CURRENT_TIMESTAMP, 'SYSTEM', NULL, NULL, NULL, NULL, NULL) ON CONFLICT(ur_ingest_resource_path_match_rule_id) DO NOTHING`,

        `INSERT INTO "ur_ingest_resource_path_match_rule" ("ur_ingest_resource_path_match_rule_id", "namespace", "regex", "flags", "nature", "priority", "description", "elaboration", "created_at", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by", "activity_log") VALUES ('pdf-docx-transform-metadata', 'default', '\.(?P<nature>pdf|docx)$', 'CONTENT_ACQUIRABLE | CONTENT_ACQUIRABLE_TRANSFORM_MARKITDOWN | CONTENT_ACQUIRABLE_METADATA', '?P<nature>', NULL, 'PDF and DOCX documents with full transformation and metadata extraction', NULL, CURRENT_TIMESTAMP, 'SYSTEM', NULL, NULL, NULL, NULL, NULL) ON CONFLICT(ur_ingest_resource_path_match_rule_id) DO NOTHING`,

        `INSERT INTO "ur_ingest_resource_path_match_rule" ("ur_ingest_resource_path_match_rule_id", "namespace", "regex", "flags", "nature", "priority", "description", "elaboration", "created_at", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by", "activity_log") VALUES ('surveilr-SQL capturable executable', 'default', 'surveilr-SQL', 'CAPTURABLE_EXECUTABLE | CAPTURABLE_SQL', NULL, NULL, 'Any entry with surveilr-SQL in the path will be treated as a capturable SQL executable and allow execution of the SQL', NULL, CURRENT_TIMESTAMP, 'SYSTEM', NULL, NULL, NULL, NULL, NULL) ON CONFLICT(ur_ingest_resource_path_match_rule_id) DO NOTHING`,

        `INSERT INTO "ur_ingest_resource_path_match_rule" ("ur_ingest_resource_path_match_rule_id", "namespace", "regex", "flags", "nature", "priority", "description", "elaboration", "created_at", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by", "activity_log") VALUES ('surveilr-[NATURE] style capturable executable', 'default', 'surveilr\[(?P<nature>[^\]]*)\]', 'CAPTURABLE_EXECUTABLE', '?P<nature>', NULL, 'Any entry with surveilr-[XYZ] in the path will be treated as a capturable executable extracting XYZ as the nature', NULL, CURRENT_TIMESTAMP, 'SYSTEM', NULL, NULL, NULL, NULL, NULL) ON CONFLICT(ur_ingest_resource_path_match_rule_id) DO NOTHING`,

        `INSERT INTO "ur_ingest_resource_path_match_rule" ("ur_ingest_resource_path_match_rule_id", "namespace", "regex", "flags", "nature", "priority", "description", "elaboration", "created_at", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by", "activity_log") VALUES ('typical ingestion extensions', 'default', '\.(?P<nature>md|mdx|html|json|jsonc|puml|txt|toml|yml|xml|tap|csv|tsv|ssv|psv|tm7)$', 'CONTENT_ACQUIRABLE', '?P<nature>', NULL, 'Ingest the content for text and structured data extensions. Assume the nature is the same as the extension.', NULL, CURRENT_TIMESTAMP, 'SYSTEM', NULL, NULL, NULL, NULL, NULL) ON CONFLICT(ur_ingest_resource_path_match_rule_id) DO NOTHING`,
        
      ];
    };

    const urIngestPathRewriteRules = () => {
      return [
        `INSERT INTO "ur_ingest_resource_path_rewrite_rule" (
          "ur_ingest_resource_path_rewrite_rule_id", "namespace", "regex", "replace", "priority", 
          "description", "elaboration", "created_at", "created_by", "updated_at", "updated_by", 
          "deleted_at", "deleted_by", "activity_log"
        ) VALUES (
          '.plantuml -> .puml', '` + namespace + `', '(\\\\.plantuml)$', '.puml', NULL, 'Treat .plantuml as .puml files',
          NULL, ` + created_at + `, 'SYSTEM', NULL, NULL, NULL, NULL, NULL
        ) ON CONFLICT(ur_ingest_resource_path_rewrite_rule_id) DO NOTHING`,
        
        `INSERT INTO "ur_ingest_resource_path_rewrite_rule" (
          "ur_ingest_resource_path_rewrite_rule_id", "namespace", "regex", "replace", "priority", 
          "description", "elaboration", "created_at", "created_by", "updated_at", "updated_by", 
          "deleted_at", "deleted_by", "activity_log"
        ) VALUES (
          '.text -> .txt', '` + namespace + `', '(\\\\.text)$', '.txt', NULL, 'Treat .text as .txt files',
          NULL, ` + created_at + `, 'SYSTEM', NULL, NULL, NULL, NULL, NULL
        ) ON CONFLICT(ur_ingest_resource_path_rewrite_rule_id) DO NOTHING`,
        
        `INSERT INTO "ur_ingest_resource_path_rewrite_rule" (
          "ur_ingest_resource_path_rewrite_rule_id", "namespace", "regex", "replace", "priority", 
          "description", "elaboration", "created_at", "created_by", "updated_at", "updated_by", 
          "deleted_at", "deleted_by", "activity_log"
        ) VALUES (
          '.yaml -> .yml', '` + namespace + `', '(\\\\.yaml)$', '.yml', NULL, 'Treat .yaml as .yml files',
          NULL, ` + created_at + `, 'SYSTEM', NULL, NULL, NULL, NULL, NULL
        ) ON CONFLICT(ur_ingest_resource_path_rewrite_rule_id) DO NOTHING`,
        
        `INSERT INTO "ur_ingest_resource_path_rewrite_rule" (
          "ur_ingest_resource_path_rewrite_rule_id", "namespace", "regex", "replace", "priority", 
          "description", "elaboration", "created_at", "created_by", "updated_at", "updated_by", 
          "deleted_at", "deleted_by", "activity_log"
        ) VALUES (
          '.ndjson -> .jsonl', '` + namespace + `', '(\\\\.ndjson)$', '.jsonl', NULL, 'Treat .ndjson as .jsonl files',
          NULL, ` + created_at + `, 'SYSTEM', NULL, NULL, NULL, NULL, NULL
        ) ON CONFLICT(ur_ingest_resource_path_rewrite_rule_id) DO NOTHING`
      ];
    };

    const partyTypeRules = () => {
      return [
        `INSERT INTO "party_type" (
          "party_type_id", "code", "value", "created_at", "created_by", "updated_at", "updated_by", 
          "deleted_at", "deleted_by", "activity_log"
        ) VALUES (
          '01' || upper(substr(hex(randomblob(10)), 1, 25)), 'ORGANIZATION', 'Organization', 
          NULL, NULL, NULL, NULL, NULL, NULL, NULL
        ) ON CONFLICT DO NOTHING`,
        
        `INSERT INTO "party_type" (
          "party_type_id", "code", "value", "created_at", "created_by", "updated_at", "updated_by", 
          "deleted_at", "deleted_by", "activity_log"
        ) VALUES (
          '01' || upper(substr(hex(randomblob(10)), 1, 25)), 'PERSON', 'Person', 
          NULL, NULL, NULL, NULL, NULL, NULL, NULL
        ) ON CONFLICT DO NOTHING`
      ];
    };

    const orchestrationNatureRules = () => {
      return [
        `INSERT INTO "orchestration_nature" (
          "orchestration_nature_id", "nature", "elaboration", "created_at", "created_by", 
          "updated_at", "updated_by", "deleted_at", "deleted_by", "activity_log"
        ) VALUES (
          'surveilr-transform-csv', 'Transform CSV', NULL, ` + created_at + `, 'SYSTEM', 
          NULL, NULL, NULL, NULL, NULL
        ) ON CONFLICT(orchestration_nature_id) DO NOTHING`,
        
        `INSERT INTO "orchestration_nature" (
          "orchestration_nature_id", "nature", "elaboration", "created_at", "created_by", 
          "updated_at", "updated_by", "deleted_at", "deleted_by", "activity_log"
        ) VALUES (
          'surveilr-transform-xml', 'Transform XML', NULL, ` + created_at + `, 'SYSTEM', 
          NULL, NULL, NULL, NULL, NULL
        ) ON CONFLICT(orchestration_nature_id) DO NOTHING`,
        
        `INSERT INTO "orchestration_nature" (
          "orchestration_nature_id", "nature", "elaboration", "created_at", "created_by", 
          "updated_at", "updated_by", "deleted_at", "deleted_by", "activity_log"
        ) VALUES (
          'surveilr-transform-html', 'Transform HTML', NULL, ` + created_at + `, 'SYSTEM', 
          NULL, NULL, NULL, NULL, NULL
        ) ON CONFLICT(orchestration_nature_id) DO NOTHING`
      ];
    };

    const uniformResourceGraphRules = () => {
      return [
        `INSERT INTO "uniform_resource_graph" ("name", "elaboration") VALUES ('filesystem', '{}') ON CONFLICT(name) DO NOTHING`,
        `INSERT INTO "uniform_resource_graph" ("name", "elaboration") VALUES ('imap', '{}') ON CONFLICT(name) DO NOTHING`,
        `INSERT INTO "uniform_resource_graph" ("name", "elaboration") VALUES ('plm', '{}') ON CONFLICT(name) DO NOTHING`,
        `INSERT INTO "uniform_resource_graph" ("name", "elaboration") VALUES ('osquery-ms', '{}') ON CONFLICT(name) DO NOTHING`
      ];
    };

    // Combine all rules following working version pattern
    const allRules = [
      ...urIngestPathMatchRules(),
      '',
      ...urIngestPathRewriteRules(),
      '',
      ...partyTypeRules(),
      '',
      ...orchestrationNatureRules(),
      '',
      ...uniformResourceGraphRules()
    ].join(';\n\n');
    
    return allRules + ';'; // Add final semicolon
  }

  @llmPromptCellDrizzle({
    description: "Prepares a prompt that will allow the user to teach an LLM about this project's code notebooks schema",
  })
  "understand notebooks schema"() {
    return `Understand the following structure of an SQLite database designed to store code notebooks and execution kernels.
The database comprises three main tables: 'code_notebook_kernel', 'code_notebook_cell', and 'code_notebook_state'.

1. 'code_notebook_kernel': Stores different types of execution kernels (SQL, Documentation, AI LLM Prompt, etc.)

2. 'code_notebook_cell': Stores the actual code cells with their interpretable code and metadata

3. 'code_notebook_state': Tracks changes in the state of each cell for migration and execution tracking

The relationships are as follows:
- Each cell in 'code_notebook_cell' is associated with a kernel in 'code_notebook_kernel'.
- The 'code_notebook_state' table tracks changes in the state of each cell, linking back to the 'code_notebook_cell' table.

This system allows for versioned, trackable, and executable code notebooks with full provenance tracking.`;
  }

  @llmPromptCellDrizzle({
    description: "Prepares a prompt that will allow the user to teach an LLM about this project's service schema",
  })
  "understand service schema"() {
    return `TODO: add table and column descriptions into migratableSQL to help LLMs understand the service schema and generate appropriate SQL queries.`;
  }

  // osQuery Management Server (Prime) cells
  @osQueryMsCellDrizzle({
    description: "System information for identification.",
  })
  "System Information"() {
    return `SELECT * FROM system_info`;
  }

  @osQueryMsCellDrizzle(
    {
      description: "Get the boundary for a node.",
    },
    ["linux", "darwin"],
    true,
  )
  "osquery-ms Boundary (Linux and Macos)"() {
    return `SELECT DISTINCT value, key FROM process_envs WHERE key='SURVEILR_OSQUERY_BOUNDARY';`;
  }

  @osQueryMsCellDrizzle(
    {
      description: "Get the boundary for a node.", 
    },
    ["windows"],
    true,
  )
  "osquery-ms Boundary (Windows)"() {
    return `SELECT DISTINCT value, variable FROM default_environment WHERE variable='SURVEILR_OSQUERY_BOUNDARY';`;
  }

  @osQueryMsCellDrizzle({
    description: "Get all software installed on a Macos computer, including browser plugins and installed packages. Note that this does not include other running processes in the processes table.",
  }, ["darwin"])
  "Installed Macos software"() {
    return `SELECT name AS name, bundle_short_version AS version, ' AS source FROM homebrew_packages;`;
  }

  @osQueryMsCellDrizzle({
    description: "Get all software installed on a Windows computer, including browser plugins and installed packages. Note that this does not include other running processes in the processes table.", 
  }, ["windows"])
  "Installed Windows software"() {
    return `SELECT name AS name, version AS version, ' AS source FROM chocolatey_packages;`;
  }

  @osQueryMsCellDrizzle({
    description: "Get all software installed on a Linux computer, including browser plugins and installed packages. Note that this does not include other running processes in the processes table.",
  }, ["linux"])
  "Installed Linux software"() {
    return `SELECT name AS name, version AS version, ' AS source FROM python_packages;`;
  }

  @osQueryMsCellDrizzle({
    description: "Get network interfaces for identification.",
  }, ["linux", "darwin"])
  "Network Interfaces (Linux and Macos)"() {
    return `SELECT * FROM interface_details;`;
  }

  @osQueryMsCellDrizzle({
    description: "Get network interfaces for identification.",
  }, ["windows"])
  "Network Interfaces (Windows)"() {
    return `SELECT * FROM interface_details;`;
  }

  @osQueryMsCellDrizzle({
    description: "Get OS version for identification.",
  }, ["linux", "darwin"])
  "OS Version (Linux and Macos)"() {
    return `SELECT * FROM os_version;`;
  }

  @osQueryMsCellDrizzle({
    description: "Get OS version for identification.",
  }, ["windows"])
  "OS Version (Windows)"() {
    return `SELECT * FROM os_version;`;
  }

  @osQueryMsCellDrizzle({
    description: "Get available disk space for monitoring.",
  }, ["linux", "darwin"])
  "Available Disk Space (Linux and Macos)"() {
    return `SELECT * FROM mounts;`;
  }

  @osQueryMsCellDrizzle({
    description: "Get available disk space for monitoring.",
  }, ["windows"])
  "Available Disk Space (Windows)"() {
    return `SELECT * FROM logical_drives;`;
  }

  @osQueryMsCellDrizzle({
    description: "Get users for security monitoring.",
  })
  "Users"() {
    return `SELECT * FROM users`;
  }

  @osQueryMsCellDrizzle({
    description: "Get listening ports for security monitoring.",
  })
  "Listening Ports"() {
    return `SELECT p.name, p.path FROM listening_ports l JOIN processes p USING (pid);`;
  }

  @osQueryMsCellDrizzle({
    description: "Get server uptime for monitoring.", 
  }, ["linux", "darwin", "windows"], true)
  "Server Uptime"() {
    return `SELECT * FROM uptime LIMIT 1;`;
  }

  // osQuery Management Server (Policy) cells
  @osQueryMsPolicyCellDrizzle({
    description: "Check if full disk encryption is enabled on Linux systems.",
  }, ["linux"])
  "Full disk encryption enabled (Linux)"() {
    return `SELECT DISTINCT value, key FROM process_envs WHERE key='';`;
  }

  @osQueryMsPolicyCellDrizzle({
    description: "Check if full disk encryption is enabled on Macos systems.",
  }, ["darwin"])
  "Full disk encryption enabled (Macos)"() {
    return `SELECT DISTINCT value, key FROM process_envs WHERE key='';`;
  }

  @osQueryMsPolicyCellDrizzle({
    description: "Check if full disk encryption is enabled on Windows systems.",
  }, ["windows"])
  "Full disk encryption enabled (Windows)"() {
    return `SELECT DISTINCT value, variable FROM default_environment WHERE variable='';`;
  }

  @osQueryMsPolicyCellDrizzle({
    description: "Check if SSH keys are properly encrypted.",
  })
  "SSH keys encrypted"() {
    return `SELECT * FROM users`;
  }

  // Text Asset cells
  @textAssetCellDrizzle(".puml", "Text Asset (.puml)", {
    description: "ERD diagram for surveilr code notebooks",
  })
  "surveilr-code-notebooks-erd.auto.puml"() {
    return `@startuml surveilr-code-notebooks-erd
!define TABLE(name,desc) class name as "desc" << (T,#FFAAAA) >>
!define ENUM(name,desc) enum name as "desc" << (E,#FFFFAA) >>

TABLE(code_notebook_kernel, "Code Notebook Kernel")
TABLE(code_notebook_cell, "Code Notebook Cell") 
TABLE(code_notebook_state, "Code Notebook State")

code_notebook_kernel ||--o{ code_notebook_cell : kernel_id
code_notebook_cell ||--o{ code_notebook_state : cell_id

@enduml`;
  }

  @textAssetCellDrizzle(".puml", "Text Asset (.puml)", {
    description: "ERD diagram for surveilr service schema", 
  })
  "surveilr-service-erd.auto.puml"() {
    return `@startuml surveilr-service-erd
!define TABLE(name,desc) class name as "desc" << (T,#FFAAAA) >>

TABLE(device, "Device")
TABLE(party, "Party")
TABLE(organization, "Organization")

@enduml`;
  }

  @textAssetCellDrizzle(".rs", "Text Asset (.rs)", {
    description: "Rust models for polygenix integration",
  })
  "models_polygenix.rs"() {
    return `// Rust models for surveilr polygenix integration
// TODO: Generate actual Rust models from Drizzle schema

pub struct Device {
    pub device_id: String,
    pub device_name: String,
}

pub struct Party {
    pub party_id: String, 
    pub party_name: String,
}`;
  }

  // Web UI auto-generation cell (equivalent to the original auto-generation system)
  @migratableCellDrizzle({
    description: "A series of idempotent INSERT statements which will auto-generate \"default\" content for all tables and views",
  })
  auto_generate_console_content_tabular_sqlpage_files() {
    return inlinedSQL(SQLTemplate`-- Auto-generate console content for all tables and views
-- This recreates the original auto-generation system using Drizzle

-- Delete existing auto-generated files
DELETE FROM sqlpage_files WHERE path like 'console/content/table/%.auto.sql';
DELETE FROM sqlpage_files WHERE path like 'console/content/view/%.auto.sql';

-- Generate table browser pages for every table
INSERT OR REPLACE INTO sqlpage_files (path, contents)
  SELECT
      'console/content/table/' || name || '.auto.sql',
      'SELECT ' || quote('dynamic') || ' AS component, sqlpage.run_sql(' || quote('shell/shell.sql') || ') AS properties;

        SELECT ' || quote('breadcrumb') || ' AS component;
        SELECT ''Home'' as title,sqlpage.environment_variable(''SQLPAGE_SITE_PREFIX'') || ''/'' AS link;
        SELECT ''Console'' as title,sqlpage.environment_variable(''SQLPAGE_SITE_PREFIX'') || ''/console'' AS link;
        SELECT ''Content'' as title,sqlpage.environment_variable(''SQLPAGE_SITE_PREFIX'') || ''/console/content'' AS link;
        SELECT ''' || name  || ' table'' as title, ''#'' AS link;

        SELECT ' || quote('title') || ' AS component, ''' || name || ' (table) Content'' as contents;

        SET total_rows = (SELECT COUNT(*) FROM ' || name || ');
        SET limit = COALESCE($limit, 50);
        SET offset = COALESCE($offset, 0);
        SET total_pages = ($total_rows + $limit - 1) / $limit;
        SET current_page = ($offset / $limit) + 1;

        SELECT ''text'' AS component, ''[' || name || ' (table) Schema](console/info-schema/table.sql?name=' || name || '&stats=yes)'' AS contents_md;
        
        SELECT ''text'' AS component,
          ''- Start Row: '' || $offset || ''\n'' ||
          ''- Rows per Page: '' || $limit || ''\n'' ||
          ''- Total Rows: '' || $total_rows || ''\n'' ||
          ''- Current Page: '' || $current_page || ''\n'' ||
          ''- Total Pages: '' || $total_pages as contents_md
        WHERE $stats IS NOT NULL;

        -- Display table with pagination
        SELECT ' || quote('table') || ' AS component,
              TRUE AS sort,
              TRUE AS search,
              TRUE AS hover,
              TRUE AS striped_rows,
              TRUE AS small;
              
        SELECT * FROM ' || name || '
        LIMIT $limit
        OFFSET $offset;

      SELECT ''text'' AS component,
          (SELECT CASE WHEN $current_page > 1 THEN ''[Previous](?limit='' || $limit || ''&offset='' || ($offset - $limit) || '')'' ELSE '''' END) || '' '' ||
          ''(Page '' || $current_page || '' of '' || $total_pages || '') '' ||
          (SELECT CASE WHEN $current_page < $total_pages THEN ''[Next](?limit='' || $limit || ''&offset='' || ($offset + $limit) || '')'' ELSE '''' END)
          AS contents_md;'
  FROM sqlite_master 
  WHERE type = 'table' 
    AND name NOT LIKE 'sqlite_%' 
    AND name NOT IN ('sqlpage_files', 'sqlpage_aide_navigation');

-- Generate view browser pages for every view
INSERT OR REPLACE INTO sqlpage_files (path, contents)
  SELECT
      'console/content/view/' || name || '.auto.sql',
      'SELECT ' || quote('dynamic') || ' AS component, sqlpage.run_sql(' || quote('shell/shell.sql') || ') AS properties;

        SELECT ' || quote('breadcrumb') || ' AS component;
        SELECT ''Home'' as title,sqlpage.environment_variable(''SQLPAGE_SITE_PREFIX'') || ''/'' AS link;
        SELECT ''Console'' as title,sqlpage.environment_variable(''SQLPAGE_SITE_PREFIX'') || ''/console'' AS link;
        SELECT ''Content'' as title,sqlpage.environment_variable(''SQLPAGE_SITE_PREFIX'') || ''/console/content'' AS link;
        SELECT ''' || name  || ' view'' as title, ''#'' AS link;

        SELECT ' || quote('title') || ' AS component, ''' || name || ' (view) Content'' as contents;

        SET total_rows = (SELECT COUNT(*) FROM ' || name || ');
        SET limit = COALESCE($limit, 50);
        SET offset = COALESCE($offset, 0);
        SET total_pages = ($total_rows + $limit - 1) / $limit;
        SET current_page = ($offset / $limit) + 1;

        SELECT ''text'' AS component, ''[' || name || ' (view) Schema](console/info-schema/view.sql?name=' || name || '&stats=yes)'' AS contents_md;
        
        SELECT ''text'' AS component,
          ''- Start Row: '' || $offset || ''\n'' ||
          ''- Rows per Page: '' || $limit || ''\n'' ||
          ''- Total Rows: '' || $total_rows || ''\n'' ||
          ''- Current Page: '' || $current_page || ''\n'' ||
          ''- Total Pages: '' || $total_pages as contents_md
        WHERE $stats IS NOT NULL;

        -- Display view with pagination
        SELECT ' || quote('table') || ' AS component,
              TRUE AS sort,
              TRUE AS search,
              TRUE AS hover,
              TRUE AS striped_rows,
              TRUE AS small;
              
        SELECT * FROM ' || name || '
        LIMIT $limit
        OFFSET $offset;

        SELECT ''text'' AS component,
            (SELECT CASE WHEN $current_page > 1 THEN ''[Previous](?limit='' || $limit || ''&offset='' || ($offset - $limit) || '')'' ELSE '''' END) || '' '' ||
            ''(Page '' || $current_page || '' of '' || $total_pages || '') '' ||
            (SELECT CASE WHEN $current_page < $total_pages THEN ''[Next](?limit='' || $limit || ''&offset='' || ($offset + $limit) || '')'' ELSE '''' END)
            AS contents_md;'
  FROM sqlite_master 
  WHERE type = 'view';

-- Generate redirect files from .sql to .auto.sql
INSERT OR IGNORE INTO sqlpage_files (path, contents)
  SELECT
      'console/content/table/' || name || '.sql',
      'SELECT ''redirect'' AS component,sqlpage.environment_variable(''SQLPAGE_SITE_PREFIX'') || ''/console/content/table/' || name || '.auto.sql'' AS link WHERE $stats IS NULL;
      SELECT ''redirect'' AS component,sqlpage.environment_variable(''SQLPAGE_SITE_PREFIX'') || ''/console/content/table/' || name || '.auto.sql?stats='' || $stats AS link WHERE $stats IS NOT NULL;'
  FROM sqlite_master 
  WHERE type = 'table' 
    AND name NOT LIKE 'sqlite_%' 
    AND name NOT IN ('sqlpage_files', 'sqlpage_aide_navigation');

INSERT OR IGNORE INTO sqlpage_files (path, contents)
  SELECT
      'console/content/view/' || name || '.sql',
      'SELECT ''redirect'' AS component,sqlpage.environment_variable(''SQLPAGE_SITE_PREFIX'') || ''/console/content/view/' || name || '.auto.sql'' AS link WHERE $stats IS NULL;
      SELECT ''redirect'' AS component,sqlpage.environment_variable(''SQLPAGE_SITE_PREFIX'') || ''/console/content/view/' || name || '.auto.sql?stats='' || $stats AS link WHERE $stats IS NOT NULL;'
  FROM sqlite_master 
  WHERE type = 'view';`);
  }

  // Generate surveilr function docs using SQL template system
  surveilrFunctionDocs(): string {
    return inlinedSQL(SQLTemplate`
-- Insert surveilr function documentation using SQL template system
-- Note: surveilr_function_docs() function is provided by surveilr binary at runtime
-- For now, we'll skip this since it's not available during bootstrap generation
-- This will be populated when the actual surveilr binary runs
-- INSERT INTO "surveilr_function_doc" ("name", "description", "parameters", "return_type", "version") 
-- SELECT name, description, parameters, return_type, version 
-- FROM surveilr_function_docs()
-- WHERE EXISTS (SELECT 1 FROM pragma_function_list WHERE name = 'surveilr_function_docs')
-- Function docs will be populated by surveilr binary at runtime`);
  }

  // Generate table size statistics (equivalent to surveilr_table_size migratableCell)
  surveilrTableSizeStats(): string {
    return inlinedSQL(SQLTemplate`
-- Create and populate surveilr_table_size for statistical purposes
DELETE FROM surveilr_table_size;
INSERT INTO surveilr_table_size (table_name, table_size_mb)
SELECT name, 
       ROUND(SUM(pgsize) / (1024.0 * 1024), 2)
FROM dbstat
GROUP BY name`);
  }

  // Graph views are now defined in ../universal/views.ts using Drizzle query builder
  uniformResourceGraphViews(): string {
    return inlinedSQL(SQLTemplate`-- Uniform Resource Graph views are now defined in ../universal/views.ts
-- Views will be created automatically by Drizzle ORM schema introspection
-- This ensures consistency between TypeScript definitions and SQL implementation

-- All graph views have been moved to ../universal/views.ts:
-- - plm_graph
-- - imap_graph 
-- - filesystem_graph;`);
  }

  // Generate code notebook state for initial migration tracking
  codeNotebookStateInserts(): string {
    return inlinedSQL(SQLTemplate`
-- Insert initial code notebook state for the bootstrap process
INSERT INTO "code_notebook_state" (
  "code_notebook_state_id", "code_notebook_cell_id", "from_state", "to_state", 
  "transition_result", "transition_reason", "transitioned_at", "elaboration",
  "created_at", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by", "activity_log"
) VALUES (
  '01JXADE9V1CHVR774FT3QHG4T0__INITIAL', '01JXADE9V1CHVR774FT3QHG4T0', 'MIGRATION_CANDIDATE', 'EXECUTED',
  NULL, 'Initial bootstrap execution', CURRENT_TIMESTAMP, NULL,
  CURRENT_TIMESTAMP, 'SYSTEM', NULL, NULL, NULL, NULL, NULL
) ON CONFLICT DO NOTHING`);
  }

  // Generate osquery policy data using Drizzle-style approach
  osqueryPolicyInserts(): string {
    const policies = [
      {
        osqueryPolicyId: '01K552HX48BFWENNVTR65S15WR',
        policyGroup: null,
        policyName: 'Ad tracking is limited (macOS)',
        osqueryCode: `SELECT CASE WHEN EXISTS (SELECT 1 FROM managed_policies WHERE domain='com.apple.AdLib' AND name='forceLimitAdTracking' AND value='1' LIMIT 1) THEN 'true' ELSE 'false' END AS policy_result;`,
        policyDescription: 'Checks that a mobile device management (MDM) solution configures the Mac to limit advertisement tracking.',
        policyPassLabel: 'Pass',
        policyFailLabel: 'Fail',
        policyPassRemarks: null,
        policyFailRemarks: 'Contact your IT administrator to ensure your Mac is receiving a profile that disables advertisement tracking.',
        osqueryPlatforms: '["darwin"]',
      },
      {
        osqueryPolicyId: '01K552HX48BZJTYTY4BWF8VFPA',
        policyGroup: null,
        policyName: 'Antivirus healthy (Linux)',
        osqueryCode: `SELECT score FROM (SELECT CASE WHEN COUNT(*) = 2 THEN 'true' ELSE 'false' END AS score FROM processes WHERE (name = 'clamd') OR (name = 'freshclam')) WHERE score = 'true';`,
        policyDescription: 'Checks that both ClamAV\'s daemon and its updater service (freshclam) are running.',
        policyPassLabel: 'Pass',
        policyFailLabel: 'Fail',
        policyPassRemarks: null,
        policyFailRemarks: 'Ensure ClamAV and Freshclam are installed and running.',
        osqueryPlatforms: '["linux","windows","darwin"]',
      },
      {
        osqueryPolicyId: '01K552HX48B134KZC95RE3A66K',
        policyGroup: null,
        policyName: 'Antivirus healthy (macOS)',
        osqueryCode: `SELECT score FROM (SELECT case when COUNT(*) = 2 then 1 ELSE 0 END AS score FROM plist WHERE (key = 'CFBundleShortVersionString' AND path = '/Library/Apple/System/Library/CoreServices/XProtect.bundle/Contents/Info.plist' AND value>=2162) OR (key = 'CFBundleShortVersionString' AND path = '/Library/Apple/System/Library/CoreServices/MRT.app/Contents/Info.plist' and value>=1.93)) WHERE score == 1;`,
        policyDescription: 'Checks the version of Malware Removal Tool (MRT) and the built-in macOS AV (Xprotect). Replace version numbers with the latest version regularly.',
        policyPassLabel: 'Pass',
        policyFailLabel: 'Fail',
        policyPassRemarks: null,
        policyFailRemarks: 'To enable automatic security definition updates, on the failing device, select System Preferences > Software Update > Advanced > Turn on Install system data files and security updates.',
        osqueryPlatforms: '["darwin"]',
      },
      {
        osqueryPolicyId: '01K552HX48CYYWY1H35C5F1KFK',
        policyGroup: null,
        policyName: 'Antivirus healthy (Windows)',
        osqueryCode: `SELECT 1 from windows_security_center wsc CROSS JOIN windows_security_products wsp WHERE antivirus = 'Good' AND type = 'Antivirus' AND signatures_up_to_date=1;`,
        policyDescription: 'Checks the status of antivirus and signature updates from the Windows Security Center.',
        policyPassLabel: 'Pass',
        policyFailLabel: 'Fail',
        policyPassRemarks: null,
        policyFailRemarks: 'Ensure Windows Defender or your third-party antivirus is running, up to date, and visible in the Windows Security Center.',
        osqueryPlatforms: '["windows"]',
      },
      {
        osqueryPolicyId: '01K552HX484MQRBGR5NEVZ08BS',
        policyGroup: null,
        policyName: 'Automatic installation of application updates is enabled (macOS)',
        osqueryCode: `SELECT 1 FROM managed_policies WHERE domain='com.apple.SoftwareUpdate' AND name='AutomaticallyInstallAppUpdates' AND value=1 LIMIT 1;`,
        policyDescription: 'Checks that a mobile device management (MDM) solution configures the Mac to automatically install updates to App Store applications.',
        policyPassLabel: 'Pass',
        policyFailLabel: 'Fail',
        policyPassRemarks: null,
        policyFailRemarks: 'Contact your IT administrator to ensure your Mac is receiving a profile that enables automatic installation of application updates.',
        osqueryPlatforms: '["darwin"]',
      },
      {
        osqueryPolicyId: '01K552HX48VXNRT8Q4FCE1X4QA',
        policyGroup: null,
        policyName: 'Automatic installation of operating system updates is enabled (macOS)',
        osqueryCode: `SELECT 1 FROM managed_policies WHERE domain='com.apple.SoftwareUpdate' AND name='AutomaticallyInstallMacOSUpdates' AND value=1 LIMIT 1;`,
        policyDescription: 'Checks that a mobile device management (MDM) solution configures the Mac to automatically install operating system updates.',
        policyPassLabel: 'Pass',
        policyFailLabel: 'Fail',
        policyPassRemarks: null,
        policyFailRemarks: 'Contact your IT administrator to ensure your Mac is receiving a profile that enables automatic installation of operating system updates.',
        osqueryPlatforms: '["darwin"]',
      },
      {
        osqueryPolicyId: '01K552HX48NFHXP6Y990F22M7F',
        policyGroup: null,
        policyName: 'Ensure \'Minimum password length\' is set to \'14 or more characters\'',
        osqueryCode: `SELECT 1 FROM security_profile_info WHERE minimum_password_length >= 14;`,
        policyDescription: 'This policy setting determines the least number of characters that make up a password for a user account.',
        policyPassLabel: 'Pass',
        policyFailLabel: 'Fail',
        policyPassRemarks: null,
        policyFailRemarks: `Automatic method:\nAsk your system administrator to establish the recommended configuration via GP, set the following UI path to 14 or more characters\n'Computer ConfigurationPoliciesWindows SettingsSecurity SettingsAccount PoliciesPassword PolicyMinimum password length'`,
        osqueryPlatforms: '["windows"]',
      },
    ];

    const insertStatements = policies.map(policy => {
      return inlinedSQL(SQLTemplate`INSERT INTO "osquery_policy" (
        "osquery_policy_id", "policy_group", "policy_name", "osquery_code", 
        "policy_description", "policy_pass_label", "policy_fail_label", 
        "policy_pass_remarks", "policy_fail_remarks", "osquery_platforms",
        "created_at", "created_by", "updated_at", "updated_by", "deleted_at", "deleted_by", "activity_log"
      ) VALUES (
        ${policy.osqueryPolicyId}, ${policy.policyGroup}, ${policy.policyName}, ${policy.osqueryCode},
        ${policy.policyDescription}, ${policy.policyPassLabel}, ${policy.policyFailLabel},
        ${policy.policyPassRemarks}, ${policy.policyFailRemarks}, ${policy.osqueryPlatforms},
        NULL, NULL, NULL, NULL, NULL, NULL, NULL
      ) ON CONFLICT DO NOTHING`);
    });

    return insertStatements.join(';\n\n') + ';';
  }

  // Generate navigation entries using SQL template system
  navigationEntries(): string {
    const entries = [
      { path: 'index.sql', caption: 'Home', namespace: 'prime', parentPath: null, siblingOrder: 1, url: 'index.sql', title: 'Resource Surveillance State Database (RSSD)', abbreviatedCaption: null, description: 'Welcome to Resource Surveillance State Database (RSSD)', elaboration: null },
      { path: 'console/index.sql', caption: 'RSSD Console', namespace: 'prime', parentPath: 'index.sql', siblingOrder: 999, url: 'console/index.sql', title: 'Resource Surveillance State Database (RSSD) Console', abbreviatedCaption: 'Console', description: 'Explore RSSD information schema, code notebooks, and SQLPage files', elaboration: null },
      { path: 'console/info-schema/index.sql', caption: 'RSSD Information Schema', namespace: 'prime', parentPath: 'console/index.sql', siblingOrder: 1, url: 'console/info-schema/index.sql', title: null, abbreviatedCaption: 'Info Schema', description: 'Explore RSSD tables, columns, views, and other information schema documentation', elaboration: null },
      { path: 'console/sqlpage-files/index.sql', caption: 'RSSD SQLPage Files', namespace: 'prime', parentPath: 'console/index.sql', siblingOrder: 3, url: 'console/sqlpage-files/index.sql', title: null, abbreviatedCaption: 'SQLPage Files', description: 'Explore RSSD SQLPage Files which govern the content of the web-UI', elaboration: null },
      { path: 'console/sqlpage-files/content.sql', caption: 'RSSD Data Tables Content SQLPage Files', namespace: 'prime', parentPath: 'console/index.sql', siblingOrder: 3, url: 'console/sqlpage-files/content.sql', title: null, abbreviatedCaption: 'Content SQLPage Files', description: 'Explore auto-generated RSSD SQLPage Files which display content within tables', elaboration: null },
      { path: 'console/sqlpage-nav/index.sql', caption: 'RSSD SQLPage Navigation', namespace: 'prime', parentPath: 'console/index.sql', siblingOrder: 3, url: 'console/sqlpage-nav/index.sql', title: null, abbreviatedCaption: 'SQLPage Navigation', description: 'See all the navigation entries for the web-UI; TODO: need to improve this to be able to get details for each navigation entry as a table', elaboration: null },
      { path: 'console/notebooks/index.sql', caption: 'RSSD Code Notebooks', namespace: 'prime', parentPath: 'console/index.sql', siblingOrder: 2, url: 'console/notebooks/index.sql', title: null, abbreviatedCaption: 'Code Notebooks', description: 'Explore RSSD Code Notebooks which contain reusable SQL and other code blocks', elaboration: null },
      { path: 'console/migrations/index.sql', caption: 'RSSD Lifecycle (migrations)', namespace: 'prime', parentPath: 'console/index.sql', siblingOrder: 2, url: 'console/migrations/index.sql', title: null, abbreviatedCaption: 'Migrations', description: 'Explore RSSD Migrations to determine what was executed and not', elaboration: null },
      { path: 'console/about.sql', caption: 'Resource Surveillance Details', namespace: 'prime', parentPath: 'console/index.sql', siblingOrder: 2, url: 'console/about.sql', title: null, abbreviatedCaption: 'About', description: 'Detailed information about the underlying surveilr binary', elaboration: null },
      { path: 'console/statistics/index.sql', caption: 'RSSD Statistics', namespace: 'prime', parentPath: 'console/index.sql', siblingOrder: 1, url: 'console/statistics/index.sql', title: null, abbreviatedCaption: 'Statistics', description: 'Explore RSSD tables, columns, views, and other information schema documentation', elaboration: null },
      { path: 'ur/index.sql', caption: 'Uniform Resource', namespace: 'prime', parentPath: 'index.sql', siblingOrder: 1, url: 'ur/index.sql', title: null, abbreviatedCaption: null, description: 'Explore ingested resources', elaboration: null },
      { path: 'ur/info-schema.sql', caption: 'Uniform Resource Tables and Views', namespace: 'prime', parentPath: 'ur/index.sql', siblingOrder: 99, url: 'ur/info-schema.sql', title: null, abbreviatedCaption: null, description: 'Information Schema documentation for ingested Uniform Resource database objects', elaboration: null },
      { path: 'ur/uniform-resource-files.sql', caption: 'Uniform Resources (Files)', namespace: 'prime', parentPath: 'ur/index.sql', siblingOrder: 1, url: 'ur/uniform-resource-files.sql', title: null, abbreviatedCaption: null, description: 'Files ingested into the `uniform_resource` table', elaboration: null },
      { path: 'ur/uniform-resource-imap-account.sql', caption: 'Uniform Resources (IMAP)', namespace: 'prime', parentPath: 'ur/index.sql', siblingOrder: 1, url: 'ur/uniform-resource-imap-account.sql', title: null, abbreviatedCaption: null, description: 'Easily access and view your emails with our Uniform Resource (IMAP) system. Ingested from various mail sources, this feature organizes and displays your messages directly in the Web UI, ensuring all your communications are available in one convenient place.', elaboration: null },
      { path: 'orchestration/index.sql', caption: 'Orchestration', namespace: 'prime', parentPath: 'index.sql', siblingOrder: 1, url: 'orchestration/index.sql', title: null, abbreviatedCaption: null, description: 'Explore details about all orchestration', elaboration: null },
      { path: 'orchestration/info-schema.sql', caption: 'Orchestration Tables and Views', namespace: 'prime', parentPath: 'orchestration/index.sql', siblingOrder: 99, url: 'orchestration/info-schema.sql', title: null, abbreviatedCaption: null, description: 'Information Schema documentation for orchestrated objects', elaboration: null },
      { path: 'docs/index.sql', caption: 'Docs', namespace: 'prime', parentPath: 'index.sql', siblingOrder: 1, url: 'docs/index.sql', title: null, abbreviatedCaption: null, description: 'Explore surveilr functions and release notes', elaboration: null },
      { path: 'docs/release-notes.sql', caption: 'Release Notes', namespace: 'prime', parentPath: 'docs/index.sql', siblingOrder: 99, url: 'docs/release-notes.sql', title: null, abbreviatedCaption: null, description: 'surveilr releases details', elaboration: null },
      { path: 'docs/functions.sql', caption: 'SQL Functions', namespace: 'prime', parentPath: 'docs/index.sql', siblingOrder: 2, url: 'docs/functions.sql', title: null, abbreviatedCaption: null, description: 'surveilr specific SQLite functions for extensibilty', elaboration: null }
    ];

    const insertStatements = entries.map(entry => {
      return inlinedSQL(SQLTemplate`INSERT INTO "sqlpage_aide_navigation" (
        "path", "caption", "namespace", "parent_path", "sibling_order", "url", 
        "title", "abbreviated_caption", "description", "elaboration"
      ) VALUES (
        ${entry.path}, ${entry.caption}, ${entry.namespace}, ${entry.parentPath}, 
        ${entry.siblingOrder}, ${entry.url}, ${entry.title}, ${entry.abbreviatedCaption}, 
        ${entry.description}, ${entry.elaboration}
      ) ON CONFLICT (namespace, parent_path, path) DO UPDATE SET 
        caption = EXCLUDED.caption,
        sibling_order = EXCLUDED.sibling_order,
        url = EXCLUDED.url,
        title = EXCLUDED.title,
        abbreviated_caption = EXCLUDED.abbreviated_caption,
        description = EXCLUDED.description,
        elaboration = EXCLUDED.elaboration`);
    });

    return insertStatements.join(';\n\n') + ';';
  }
}

export async function SQL() {
  const notebook = new DrizzleRssdInitNotebook();
  return [
    await notebook.bootstrapDDL(),
  ];
}

// this will be used by any callers who want to serve it as a CLI with STDOUT
if (import.meta.main) {
  console.log((await SQL()).join("\n"));
}